// TODO Fetch data from the PostgreSQL databast (to be implenented later)
function fetchGradeData() {
    // This function will query the PostgreSQL database and return grade data
    console.log("Fetching grade data...");
    //Create a new request for HTTP data
    let xhr = new XMLHttpRequest();
    //This is the address on the machine we're asking for data 
    let apiRoute = "/api/grades";
    // When the request changes status, we run this anonymous function
    xhr.onreadystatechange = function(){
        let results;
        //check if we're done
        if(xhr.readyState === xhr.DONE){
            //Check if we're successful
            if(xhr.status !== 200){
                console.error("Could not get grades. Status: " + xhr.status);
            }
            // And then call the function to update the HTML with our data
            PopulateGradebook(JSON.parse(xhr.responseText));
        }
    }.bind(this);
    xhr.open("get", apiRoute, true);
    xhr.send();
}
// TODO Populate the table with grade data
function PopulateGradebook(data) {
    // This function will take the fetched grade data and populte the table
    console.log("Populating gradebook with data:", data);
    let tableElm = document.getElementById("gradebook");//Get the gradebook table element
        data.forEach(function(assignment){
            let row = document.createElement("tr");//create a table row element
            let columns = []; //Handy place to stick the columns of information
            columns.name = document.createElement('td');//the first columns table data will be the name
            columns.name.appendChild(
                // Concentrate the full name: "Last_name, First_name"
                document.createTextNode(assignment.last_name + ", " + assignment.first_name)
            );
            columns.grade = document.createElement('td');//secound column will be the grade
            columns.grade.appendChild(
                //Just put the name in text, you could be fancy and figure out the letter grade here
                // with either a bunch of conditions, or a JavaScript "switch" statement
                document.createTextNode(assignment.total_grade)
            );
            //Add the table data columns to the table row
            row.appendChild(columns.name);
            row.appendChild(columns.grade);
            //Add the row to the table itself to make the data visible
            tableElm.appendChild(row);
        });
}

//TODO REMOVE THIS
// Call the Stubs to demonstrate the workflow
const gradeData = fetchGradeData();
PopulateGradebook(gradeData);
// END REMOVE


CREATE TABLE STUDENTS (   
    STUDENT_ID SERIAL PRIMARY KEY,   
    FIRST_NAME VARCHAR(50),   
    LAST_NAME VARCHAR(50),   
    EMAIL VARCHAR(100),   
    ENROLLMENT_DATE DATE   
    );

CREATE TABLE ASSIGNMENTS (   
    ASSIGNMENT_ID SERIAL PRIMARY KEY,   
    TITLE VARCHAR(100),   
    DESCRIPTION TEXT,   
    DUE_DATE DATE,   
    STUDENT_ID INT REFERENCES STUDENTS(STUDENT_ID)   
    );  

    INSERT INTO STUDENTS (FIRST_NAME, LAST_NAME, EMAIL)   
    VALUES ('Sabrina', 'Holene', 'snholene@my.waketech.edu');   
        Select * from students
        Select * from assignments
INSERT INTO ASSIGNMENTS (TITLE, DESCRIPTION, DUE_DATE, STUDENT_ID) 
VALUES ('LAB7 POSTGRES', 'SET UP A DATABASE AND INSERT RECORDS AS DESCRIBED IN THE INSTRUCTIONS.','2025-03-14', 1);
SELECT * FROM ASSIGNMENTS, STUDENTS WHERE ASSIGNMENTS.STUDENT_ID = STUDENTS.STUDENT_ID
